terga1_Predomics_aggregation_ovo_constrained_df_no_balance,
terga1_maximization_constrained_df_no_balance,
terga1_voting_constrained_df_no_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_no_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_no_balance,
terbeam_maximization_unconstrained_df_no_balance,
terbeam_voting_unconstrained_df_no_balance,
terbeam_predomics_aggregation_ova_constrained_df_no_balance,
terbeam_predomics_aggregation_ovo_constrained_df_no_balance,
terbeam_maximization_constrained_df_no_balance,
terbeam_voting_constrained_df_no_balance,
sota_dt_metrics_results_no_balance,
sota_forest_metrics_results_no_balance,
sota_gbm_metrics_results_no_balance,
sota_knn_metrics_results_no_balance,
sota_svm_metrics_results_no_balance,
sota_logreg_metrics_results_no_balance,
sota_ann_metrics_results_no_balance
)
# Check the combined data frame
print(head(analysis_table_final2))
analysis_table_final_complet_no_balance_ = analysis_table_final2
# Save the combined data frame to an RDA file
# Remplacements directs avec gsub ou ifelse selon tes cas
analysis_table_final_complet_no_balance_$Methods[
analysis_table_final_complet_no_balance_$Methods == "terga1_Predomics_aggregation_ova_unconstrained_no_balance"
] <- "terga1_predomics_aggregation_ova_unconstrained_no_balance"
analysis_table_final_complet_no_balance_$Methods[
analysis_table_final_complet_no_balance_$Methods == "_terga1_Predomics_aggregation_ova_constrained_no_balance"
] <- "_terga1_predomics_aggregation_ova_constrained_no_balance"
analysis_table_final_complet_no_balance_$Methods[
analysis_table_final_complet_no_balance_$Methods == "terga1_Predomics_aggregation_ovo_unconstrained_no_balance"
] <- "terga1_predomics_aggregation_ovo_unconstrained_no_balance"
analysis_table_final_complet_no_balance_$Methods[
analysis_table_final_complet_no_balance_$Methods == "_terga1_Predomics_aggregation_ovo_constrained_no_balance"
] <- "_terga1_predomics_aggregation_ovo_constrained_no_balance"
save(analysis_table_final_complet_no_balance_, file = "analysis_table_final_complet_no_balance_.rda")
analysis_table_final_complet_no_balance_
analysis_table_final_complet_no_balance_$Methods
analysis_table_final2 <- bind_rows(
terga1_Predomics_aggregation_ova_unconstrained_df_balance,
terga1_Predomics_aggregation_ovo_unconstrained_df_balance,
terga1_maximization_unconstrained_df_balance,
terga1_voting_unconstrained_df_balance,
terga1_Predomics_aggregation_ova_constrained_df_balance,
terga1_Predomics_aggregation_ovo_constrained_df_balance,
terga1_maximization_constrained_df_balance,
terga1_voting_constrained_df_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_balance,
terbeam_maximization_unconstrained_df_balance,
terbeam_voting_unconstrained_df_balance,
terbeam_predomics_aggregation_ova_constrained_df_balance,
terbeam_predomics_aggregation_ovo_constrained_df_balance,
terbeam_maximization_constrained_df_balance,
terbeam_voting_constrained_df_balance,
sota_dt_metrics_results_balance,
sota_forest_metrics_results_balance,
sota_gbm_metrics_results_balance,
sota_knn_metrics_results_balance,
sota_svm_metrics_results_balance,
sota_logreg_metrics_results_balance,
sota_ann_metrics_results_balance
)
load("~/Documents/multiclasse_predomics/mcpredomics/terga1_Predomics_aggregation_ovo_constrained_df_balance.rda")
analysis_table_final2 <- bind_rows(
terga1_Predomics_aggregation_ova_unconstrained_df_balance,
terga1_Predomics_aggregation_ovo_unconstrained_df_balance,
terga1_maximization_unconstrained_df_balance,
terga1_voting_unconstrained_df_balance,
terga1_Predomics_aggregation_ova_constrained_df_balance,
terga1_Predomics_aggregation_ovo_constrained_df_balance,
terga1_maximization_constrained_df_balance,
terga1_voting_constrained_df_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_balance,
terbeam_maximization_unconstrained_df_balance,
terbeam_voting_unconstrained_df_balance,
terbeam_predomics_aggregation_ova_constrained_df_balance,
terbeam_predomics_aggregation_ovo_constrained_df_balance,
terbeam_maximization_constrained_df_balance,
terbeam_voting_constrained_df_balance,
sota_dt_metrics_results_balance,
sota_forest_metrics_results_balance,
sota_gbm_metrics_results_balance,
sota_knn_metrics_results_balance,
sota_svm_metrics_results_balance,
sota_logreg_metrics_results_balance,
sota_ann_metrics_results_balance
)
# Check the combined data frame
print(head(analysis_table_final2))
analysis_table_final_complet_balance_ = analysis_table_final2
# Save the combined data frame to an RDA file
sota_ann_metrics_results_balance$k
terga1_Predomics_aggregation_ova_unconstrained_df_balance$Features
sota_ann_metrics_results_balance <- sota_ann_metrics_results_balance %>%
rename(Features = k)
analysis_table_final2 <- bind_rows(
terga1_Predomics_aggregation_ova_unconstrained_df_balance,
terga1_Predomics_aggregation_ovo_unconstrained_df_balance,
terga1_maximization_unconstrained_df_balance,
terga1_voting_unconstrained_df_balance,
terga1_Predomics_aggregation_ova_constrained_df_balance,
terga1_Predomics_aggregation_ovo_constrained_df_balance,
terga1_maximization_constrained_df_balance,
terga1_voting_constrained_df_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_balance,
terbeam_maximization_unconstrained_df_balance,
terbeam_voting_unconstrained_df_balance,
terbeam_predomics_aggregation_ova_constrained_df_balance,
terbeam_predomics_aggregation_ovo_constrained_df_balance,
terbeam_maximization_constrained_df_balance,
terbeam_voting_constrained_df_balance,
sota_dt_metrics_results_balance,
sota_forest_metrics_results_balance,
sota_gbm_metrics_results_balance,
sota_knn_metrics_results_balance,
sota_svm_metrics_results_balance,
sota_logreg_metrics_results_balance,
sota_ann_metrics_results_balance
)
# Check the combined data frame
print(head(analysis_table_final2))
analysis_table_final_complet_balance_ = analysis_table_final2
sota_logreg_metrics_results_balance <- sota_logreg_metrics_results_balance %>%
rename(Features = k)
sota_svm_metrics_results_balance <- sota_svm_metrics_results_balance %>%
rename(Features = k)
sota_knn_metrics_results_balance <- sota_knn_metrics_results_balance %>%
rename(Features = k)
sota_gbm_metrics_results_balance <- sota_gbm_metrics_results_balance %>%
rename(Features = k)
sota_forest_metrics_results_balance <- sota_forest_metrics_results_balance %>%
rename(Features = k)
sota_dt_metrics_results_balance <- sota_dt_metrics_results_balance %>%
rename(Features = k)
analysis_table_final2 <- bind_rows(
terga1_Predomics_aggregation_ova_unconstrained_df_balance,
terga1_Predomics_aggregation_ovo_unconstrained_df_balance,
terga1_maximization_unconstrained_df_balance,
terga1_voting_unconstrained_df_balance,
terga1_Predomics_aggregation_ova_constrained_df_balance,
terga1_Predomics_aggregation_ovo_constrained_df_balance,
terga1_maximization_constrained_df_balance,
terga1_voting_constrained_df_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_balance,
terbeam_maximization_unconstrained_df_balance,
terbeam_voting_unconstrained_df_balance,
terbeam_predomics_aggregation_ova_constrained_df_balance,
terbeam_predomics_aggregation_ovo_constrained_df_balance,
terbeam_maximization_constrained_df_balance,
terbeam_voting_constrained_df_balance,
sota_dt_metrics_results_balance,
sota_forest_metrics_results_balance,
sota_gbm_metrics_results_balance,
sota_knn_metrics_results_balance,
sota_svm_metrics_results_balance,
sota_logreg_metrics_results_balance,
sota_ann_metrics_results_balance
)
# Check the combined data frame
print(head(analysis_table_final2))
analysis_table_final_complet_balance_ = analysis_table_final2
terbeam_maximization_constrained_df_balance <-  terbeam_maximization_constrained_df_balance %>%
rename(Features = k)
terbeam_maximization_constrained_df_balance$Features
terbeam_predomics_aggregation_ovo_constrained_df_balance <-  terbeam_predomics_aggregation_ovo_constrained_df_balance %>%
rename(Features = k)
terbeam_voting_constrained_df_balance <-   terbeam_voting_constrained_df_balance %>%
rename(Features = k)
terga1_voting_constrained_df_balance <-   terga1_voting_constrained_df_balance %>%
rename(Features = k)
terga1_maximization_constrained_df_balance <-   terga1_maximization_constrained_df_balance %>%
rename(Features = k)
terga1_Predomics_aggregation_ovo_constrained_df_balance <-   terga1_Predomics_aggregation_ovo_constrained_df_balance %>%
rename(Features = k)
terga1_Predomics_aggregation_ova_constrained_df_balance <- terga1_Predomics_aggregation_ova_constrained_df_balance %>%
rename(Features = k)
analysis_table_final2 <- bind_rows(
terga1_Predomics_aggregation_ova_unconstrained_df_balance,
terga1_Predomics_aggregation_ovo_unconstrained_df_balance,
terga1_maximization_unconstrained_df_balance,
terga1_voting_unconstrained_df_balance,
terga1_Predomics_aggregation_ova_constrained_df_balance,
terga1_Predomics_aggregation_ovo_constrained_df_balance,
terga1_maximization_constrained_df_balance,
terga1_voting_constrained_df_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_balance,
terbeam_maximization_unconstrained_df_balance,
terbeam_voting_unconstrained_df_balance,
terbeam_predomics_aggregation_ova_constrained_df_balance,
terbeam_predomics_aggregation_ovo_constrained_df_balance,
terbeam_maximization_constrained_df_balance,
terbeam_voting_constrained_df_balance,
sota_dt_metrics_results_balance,
sota_forest_metrics_results_balance,
sota_gbm_metrics_results_balance,
sota_knn_metrics_results_balance,
sota_svm_metrics_results_balance,
sota_logreg_metrics_results_balance,
sota_ann_metrics_results_balance
)
# Check the combined data frame
print(head(analysis_table_final2))
analysis_table_final_complet_balance_ = analysis_table_final2
analysis_table_final2$k
terbeam_predomics_aggregation_ova_constrained_df_balance <-  terbeam_predomics_aggregation_ova_constrained_df_balance %>%
rename(Features = k)
analysis_table_final2 <- bind_rows(
terga1_Predomics_aggregation_ova_unconstrained_df_balance,
terga1_Predomics_aggregation_ovo_unconstrained_df_balance,
terga1_maximization_unconstrained_df_balance,
terga1_voting_unconstrained_df_balance,
terga1_Predomics_aggregation_ova_constrained_df_balance,
terga1_Predomics_aggregation_ovo_constrained_df_balance,
terga1_maximization_constrained_df_balance,
terga1_voting_constrained_df_balance,
terbeam_predomics_aggregation_ova_unconstrained_df_balance,
terbeam_predomics_aggregation_ovo_unconstrained_df_balance,
terbeam_maximization_unconstrained_df_balance,
terbeam_voting_unconstrained_df_balance,
terbeam_predomics_aggregation_ova_constrained_df_balance,
terbeam_predomics_aggregation_ovo_constrained_df_balance,
terbeam_maximization_constrained_df_balance,
terbeam_voting_constrained_df_balance,
sota_dt_metrics_results_balance,
sota_forest_metrics_results_balance,
sota_gbm_metrics_results_balance,
sota_knn_metrics_results_balance,
sota_svm_metrics_results_balance,
sota_logreg_metrics_results_balance,
sota_ann_metrics_results_balance
)
# Check the combined data frame
print(head(analysis_table_final2))
analysis_table_final_complet_balance_ = analysis_table_final2
# Save the combined data frame to an RDA file
# Remplacements directs avec gsub ou ifelse selon tes cas
analysis_table_final_complet_balance_$Methods[
analysis_table_final_complet_balance_$Methods == "terga1_Predomics_aggregation_ova_unconstrained_balance"
] <- "terga1_predomics_aggregation_ova_unconstrained_balance"
analysis_table_final_complet_balance_$Methods[
analysis_table_final_complet_balance_$Methods == "_terga1_Predomics_aggregation_ova_constrained_balance"
] <- "_terga1_predomics_aggregation_ova_constrained_balance"
analysis_table_final_complet_balance_$Methods[
analysis_table_final_complet_balance_$Methods == "terga1_Predomics_aggregation_ovo_unconstrained_balance"
] <- "terga1_predomics_aggregation_ovo_unconstrained_balance"
analysis_table_final_complet_balance_$Methods[
analysis_table_final_complet_balance_$Methods == "_terga1_Predomics_aggregation_ovo_constrained_balance"
] <- "_terga1_predomics_aggregation_ovo_constrained_balance"
save(analysis_table_final_complet_balance_, file = "analysis_table_final_complet_balance_.rda")
# Fusionner les quatre dataframes en ajoutant une colonne pour différencier les datasets
analysis_table_no_balance_ <-analysis_table_no_balance_ %>%
mutate(Dataset = "Enterotype no_balanced")
load("~/Documents/multiclasse_predomics/mcpredomics/analysis_table_final_complet_no_balance_3_.rda")
load("~/Documents/multiclasse_predomics/mcpredomics/analysis_table_final_complet_no_balance_2_.rda")
load("~/Documents/multiclasse_predomics/mcpredomics/analysis_table_final_complet_no_balance_.rda")
load("~/Documents/multiclasse_predomics/mcpredomics/analysis_table_final_complet_balance_.rda")
# Fusionner les quatre dataframes en ajoutant une colonne pour différencier les datasets
analysis_table_no_balance_ <-analysis_table_final_complet_no_balance_ %>%
mutate(Dataset = "Enterotype no_balanced")
analysis_table_balance_ <- analysis_table_final_complet_balance_ %>%
mutate(Dataset = "Enterotype balanced")
analysis_table_no_balance_2_ <- analysis_table_final_complet_no_balance_2_ %>%
mutate(Dataset = "CRC, Adenoma, Control")
analysis_table_no_balance_3_ <- analysis_table_final_complet_no_balance_3_ %>%
mutate(Dataset = "T2D, IGT, Control ")
# Combiner les quatre tables
df_combined <- bind_rows(analysis_table_no_balance_,
analysis_table_balance_,
analysis_table_no_balance_2_,
analysis_table_no_balance_3_)
# Imputation des valeurs manquantes pour les colonnes numériques
df_combined <- df_combined %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Renommer "Features" en "k"
df_combined <- df_combined %>%
rename(k = Features)
# Convertir en format long
df_long <- df_combined %>%
pivot_longer(
cols = c("Accuracy.empirique", "Accuracy.generalization"),  # Se limiter aux colonnes de précision
names_to = c("Metric", "Partition"),
names_sep = "\\.",
values_to = "Value"
) %>%
mutate(
Partition = recode(Partition, 'empirique' = 'train', 'generalization' = 'test'),
Partition = factor(Partition, levels = c("train", "test")),
Value = as.numeric(Value),
Group = case_when(
str_starts(Methods, "terbeam") ~ "Predomics Terbeam unconstrained",
str_starts(Methods, "_terbeam") ~ "Predomics Terbeam constrained",
str_starts(Methods, "terga1") ~ "Predomics Terga1 unconstrained",
str_starts(Methods, "_terga1") ~ "Predomics Terga1 constrained",
TRUE ~ "SOTA"
),
Subgroup = case_when(
str_starts(Methods, "terbeam") ~ "Terbeam unconstrained",
str_starts(Methods, "_terbeam") ~ "Terbeam constrained",
str_starts(Methods, "terga1") ~ "Terga1 unconstrained",
str_starts(Methods, "_terga1") ~ "Terga1 constrained",
TRUE ~ "SOTA"
)
)
# Regrouper "Predomics Terbeam unconstrained" et "Predomics Terga1 unconstrained"
df_long$Group <- recode(df_long$Group,
"Predomics Terbeam unconstrained" = "Predomics Terbeam & Terga1 unconstrained",
"Predomics Terga1 unconstrained" = "Predomics Terbeam & Terga1 unconstrained",
"Predomics Terbeam constrained" = "Predomics Terbeam & Terga1 constrained",
"Predomics Terga1 constrained" = "Predomics Terbeam & Terga1 constrained")
# Filtrer pour ne garder que la partition "test" et la métrique "Accuracy.generalization"
df_accuracy <- df_long %>%
filter(Metric == "Accuracy" & Partition == "test")
# Agréger les données pour le résumé
df_summary <- df_accuracy %>%
group_by(Methods, Partition, Metric, k, Subgroup, Group, Dataset) %>%
summarize(
mean_value = mean(Value, na.rm = TRUE),
sd_value = sd(Value, na.rm = TRUE),
.groups = "drop"
)
# Supprimer les lignes avec des valeurs manquantes ou vides dans Metric ou Group
df_summary <- df_summary %>%
filter(!is.na(Metric) & !is.na(Group) & Metric != "" & Group != "")
# Suppression des préfixes et des suffixes dans l'affichage des méthodes
df_summary <- df_summary %>%
mutate(Methods = str_remove_all(Methods, "^(terbeam_|_terbeam_|terga1_|_terga1_)|(_no_balance|_balance)$"))
# Supprimer les doublons de méthodes après la suppression des préfixes et des suffixes
df_summary <- df_summary %>%
group_by(Methods, Partition, Metric, k, Subgroup, Group, Dataset) %>%
summarize(
mean_value = mean(mean_value, na.rm = TRUE),
sd_value = mean(sd_value, na.rm = TRUE),
.groups = "drop"
)
# Trouver la valeur maximale d'accuracy pour chaque dataset et group
df_summary <- df_summary %>%
group_by(Dataset, Group) %>%
mutate(max_accuracy = max(mean_value, na.rm = TRUE)) %>%
ungroup()
# Ajouter une colonne pour marquer les points avec l'accuracy maximale
df_summary <- df_summary %>%
mutate(is_max_accuracy = ifelse(mean_value == max_accuracy, TRUE, FALSE))
# Définir une palette de couleurs personnalisée
custom_colors <- c(
"Predomics Terbeam & Terga1 unconstrained" = "green",
"Predomics Terbeam & Terga1 constrained" = "blue",
"SOTA" = "black",
"Terbeam unconstrained" = "darkgreen",
"Terga1 unconstrained" = "darkblue",
"Terbeam constrained" = "lightgreen",
"Terga1 constrained" = "lightblue"
)
# Définir une palette de formes personnalisée
custom_shapes <- c(
"Predomics Terbeam & Terga1 unconstrained" = 16,
"Predomics Terbeam & Terga1 constrained" = 4,
"SOTA" = 19,
"Terbeam unconstrained" = 17,
"Terga1 unconstrained" = 18,
"Terbeam constrained" = 15,
"Terga1 constrained" = 8
)
# Créer et afficher le graphique sans générer un fichier PDF
df_summary %>%
ggplot(aes(x = Methods, y = mean_value, color = Subgroup, shape = Subgroup)) +
geom_point(position = position_dodge(width = 0.5), size = 4) +
geom_errorbar(aes(ymin = mean_value - sd_value, ymax = mean_value + sd_value),
position = position_dodge(width = 0.5), width = 0.2) +
geom_point(data = subset(df_summary, is_max_accuracy == TRUE),
aes(x = Methods, y = mean_value),
shape = 8, color = "red", size = 5) + # Ajout d'une étoile pour la valeur maximale
facet_grid(Dataset ~ Group, scales = "free") +
ylab("Accuracy.generalization") +
xlab("Methods") +
theme_bw() +
scale_colour_manual(values = custom_colors) +
scale_shape_manual(values = custom_shapes) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
)
# Fusionner les quatre dataframes en ajoutant une colonne pour différencier les datasets
analysis_table_no_balance_ <-analysis_table_final_complet_no_balance_ %>%
mutate(Dataset = "Enterotype no_balanced")
analysis_table_balance_ <- analysis_table_final_complet_balance_ %>%
mutate(Dataset = "Enterotype balanced")
analysis_table_no_balance_2_ <- analysis_table_final_complet_no_balance_2_ %>%
mutate(Dataset = "CRC, Adenoma, Control")
analysis_table_no_balance_3_ <- analysis_table_final_complet_no_balance_3_ %>%
mutate(Dataset = "T2D, IGT, Control ")
# Combiner les quatre tables
df_combined <- bind_rows(analysis_table_no_balance_,
analysis_table_balance_,
analysis_table_no_balance_2_,
analysis_table_no_balance_3_)
# Imputation des valeurs manquantes pour les colonnes numériques
df_combined <- df_combined %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Renommer "Features" en "k"
df_combined <- df_combined %>%
rename(k = Features)
# Convertir en format long
df_long <- df_combined %>%
pivot_longer(
cols = c("Accuracy.empirique", "Accuracy.generalization"),  # Se limiter aux colonnes de précision
names_to = c("Metric", "Partition"),
names_sep = "\\.",
values_to = "Value"
) %>%
mutate(
Partition = recode(Partition, 'empirique' = 'train', 'generalization' = 'test'),
Partition = factor(Partition, levels = c("train", "test")),
Value = as.numeric(Value),
Group = case_when(
str_starts(Methods, "terbeam") ~ "Predomics Terbeam unconstrained",
str_starts(Methods, "_terbeam") ~ "Predomics Terbeam constrained",
str_starts(Methods, "terga1") ~ "Predomics Terga1 unconstrained",
str_starts(Methods, "_terga1") ~ "Predomics Terga1 constrained",
TRUE ~ "SOTA"
),
Subgroup = case_when(
str_starts(Methods, "terbeam") ~ "Terbeam unconstrained",
str_starts(Methods, "_terbeam") ~ "Terbeam constrained",
str_starts(Methods, "terga1") ~ "Terga1 unconstrained",
str_starts(Methods, "_terga1") ~ "Terga1 constrained",
TRUE ~ "SOTA"
)
)
# Regrouper "Predomics Terbeam unconstrained" et "Predomics Terga1 unconstrained"
df_long$Group <- recode(df_long$Group,
"Predomics Terbeam unconstrained" = "Predomics Terbeam & Terga1 unconstrained",
"Predomics Terga1 unconstrained" = "Predomics Terbeam & Terga1 unconstrained",
"Predomics Terbeam constrained" = "Predomics Terbeam & Terga1 constrained",
"Predomics Terga1 constrained" = "Predomics Terbeam & Terga1 constrained")
# Filtrer pour ne garder que la partition "test" et la métrique "Accuracy.generalization"
df_accuracy <- df_long %>%
filter(Metric == "Accuracy" & Partition == "test")
# Agréger les données pour le résumé
df_summary <- df_accuracy %>%
group_by(Methods, Partition, Metric, k, Subgroup, Group, Dataset) %>%
summarize(
mean_value = mean(Value, na.rm = TRUE),
sd_value = sd(Value, na.rm = TRUE),
.groups = "drop"
)
# Supprimer les lignes avec des valeurs manquantes ou vides dans Metric ou Group
df_summary <- df_summary %>%
filter(!is.na(Metric) & !is.na(Group) & Metric != "" & Group != "")
# Suppression des préfixes et des suffixes dans l'affichage des méthodes
df_summary <- df_summary %>%
mutate(Methods = str_remove_all(Methods, "^(terbeam_|_terbeam_|terga1_|_terga1_)|(_no_balance|_balance)$"))
# Supprimer les doublons de méthodes après la suppression des préfixes et des suffixes
df_summary <- df_summary %>%
group_by(Methods, Partition, Metric, k, Subgroup, Group, Dataset) %>%
summarize(
mean_value = mean(mean_value, na.rm = TRUE),
sd_value = mean(sd_value, na.rm = TRUE),
.groups = "drop"
)
# Trouver la valeur maximale d'accuracy pour chaque dataset et group
df_summary <- df_summary %>%
group_by(Dataset, Group) %>%
mutate(max_accuracy = max(mean_value, na.rm = TRUE)) %>%
ungroup()
# Ajouter une colonne pour marquer les points avec l'accuracy maximale
df_summary <- df_summary %>%
mutate(is_max_accuracy = ifelse(mean_value == max_accuracy, TRUE, FALSE))
# Définir une palette de couleurs personnalisée
custom_colors <- c(
"Predomics Terbeam & Terga1 unconstrained" = "green",
"Predomics Terbeam & Terga1 constrained" = "blue",
"SOTA" = "black",
"Terbeam unconstrained" = "darkgreen",
"Terga1 unconstrained" = "darkblue",
"Terbeam constrained" = "lightgreen",
"Terga1 constrained" = "lightblue"
)
# Définir une palette de formes personnalisée
custom_shapes <- c(
"Predomics Terbeam & Terga1 unconstrained" = 16,
"Predomics Terbeam & Terga1 constrained" = 4,
"SOTA" = 19,
"Terbeam unconstrained" = 17,
"Terga1 unconstrained" = 18,
"Terbeam constrained" = 15,
"Terga1 constrained" = 8
)
# Créer et afficher le graphique sans générer un fichier PDF
df_summary %>%
ggplot(aes(x = Methods, y = mean_value, color = Subgroup, shape = Subgroup)) +
geom_point(position = position_dodge(width = 0.5), size = 4) +
geom_errorbar(aes(ymin = mean_value - sd_value, ymax = mean_value + sd_value),
position = position_dodge(width = 0.5), width = 0.2) +
geom_point(data = subset(df_summary, is_max_accuracy == TRUE),
aes(x = Methods, y = mean_value),
shape = 8, color = "red", size = 5) + # Ajout d'une étoile pour la valeur maximale
facet_grid(Dataset ~ Group, scales = "free") +
ylab("Accuracy.generalization") +
xlab("Methods") +
theme_bw() +
scale_colour_manual(values = custom_colors) +
scale_shape_manual(values = custom_shapes) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
)
