Unique_maximization <- Unique_maximizationAggregation$crossVal$scores$mean.acc
Unique_Predomics_Aggre <- Unique_Predomics_Aggregation_ova$crossVal$scores$mean.acc
load("Unique_Predomics_aggregation_ova.rda")
load("Unique_maximizationAggregation.rda")
load("Unique_rankingAggregation.rda")
load("Unique_weightedAggregation.rda")
load("Unique_votingAggregation.rda")
library(reshape2)
library(ggplot2)
library(ggpubr)
transform_model_data <- function(model_data, model_name) {
testlist <- model_data$crossVal$scores[grep("generalization|empirical", names(model_data$crossVal$scores))]
testlist2 <- list()
for(i in names(testlist)) {
idf <- testlist[[i]]
if(unique(colSums(is.na(idf))) != nrow(idf)) {
idf$sparsity <- rownames(idf)
idf <- melt(idf)
idf$source <- i
testlist2[[i]] <- idf
}
}
testlist2.df <- do.call("rbind", testlist2)
testlist2.df$emp_gen <- gsub("\\..*$", "", testlist2.df$source)
testlist2.df$metric <- gsub("^.*\\.", "", testlist2.df$source)
testlist2.df$model <- model_name
testlist2.df <- testlist2.df[is.finite(testlist2.df$value), ]
testlist2.df <- testlist2.df[testlist2.df$metric %in% c("acc", "prc"), ]
return(testlist2.df)
}
df1 <- transform_model_data(Unique_maximizationAggregation, "Unique_maximizationAggregation")
df2 <- transform_model_data(Unique_Predomics_aggregation_ova, "Unique_Predomics_aggregation_ova")
df3 <- transform_model_data(Unique_rankingAggregation, "Unique_rankingAggregation")
df4 <- transform_model_data(Unique_weightedAggregation, "Unique_weightedAggregation")
df5 <- transform_model_data(Unique_votingAggregation, "Unique_votingAggregation")
alldf <- rbind(df1, df2, df3, df4, df5)
ggplot(alldf, aes(x=model, y=value)) +
geom_point(aes(colour=sparsity)) +
facet_grid(.~metric+emp_gen) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Fonction pour transformer les données des modèles
transform_model_data <- function(model_data, model_name) {
testlist <- model_data$crossVal$scores[grep("generalization|empirical", names(model_data$crossVal$scores))]
testlist2 <- list()
for(i in names(testlist)) {
idf <- testlist[[i]]
if(unique(colSums(is.na(idf))) != nrow(idf)) {
idf$sparsity <- rownames(idf)
idf <- melt(idf)
idf$source <- i
testlist2[[i]] <- idf
}
}
testlist2.df <- do.call("rbind", testlist2)
testlist2.df$emp_gen <- gsub("\\..*$", "", testlist2.df$source)
testlist2.df$metric <- gsub("^.*\\.", "", testlist2.df$source)
testlist2.df$model <- model_name
testlist2.df <- testlist2.df[is.finite(testlist2.df$value), ]
testlist2.df <- testlist2.df[testlist2.df$metric %in% c("f1s", "rec"), ]
return(testlist2.df)
}
df1 <- transform_model_data(Unique_maximizationAggregation, "Unique_maximizationAggregation")
df2 <- transform_model_data(Unique_Predomics_aggregation_ova, "Unique_Predomics_aggregation_ova")
df3 <- transform_model_data(Unique_rankingAggregation, "Unique_rankingAggregation")
df4 <- transform_model_data(Unique_weightedAggregation, "Unique_weightedAggregation")
df5 <- transform_model_data(Unique_votingAggregation, "Unique_votingAggregation")
alldf <- rbind(df1, df2, df3, df4, df5)
ggplot(alldf, aes(x=model, y=value)) +
geom_point(aes(colour=sparsity)) +
facet_grid(.~metric+emp_gen) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(reshape2)
# Données fournies
Unique_weighted <- Unique_weightedAggregation$crossVal$scores$mean.acc
Unique_maximization <- Unique_maximizationAggregation$crossVal$scores$mean.acc
Unique_Predomics_Aggre <- Unique_Predomics_Aggregation_ova$crossVal$scores$mean.acc
library(ggplot2)
library(reshape2)
# Données fournies
Unique_weighted <- Unique_weightedAggregation$crossVal$scores$mean.acc
Unique_maximization <- Unique_maximizationAggregation$crossVal$scores$mean.acc
Unique_Predomics_Aggre <- Unique_Predomics_aggregation_ova$crossVal$scores$mean.acc
Unique_ranking <- Unique_rankingAggregation$crossVal$scores$mean.acc
Unique_voting <- Unique_votingAggregation$crossVal$scores$mean.acc
# Ajouter la colonne 'k'
Unique_weighted$k <- rownames(Unique_weighted)
Unique_maximization$k <- rownames(Unique_maximization)
Unique_Predomics_Aggre$k <- rownames(Unique_Predomics_Aggre)
Unique_ranking$k <- rownames(Unique_ranking)
Unique_voting$k <- rownames(Unique_voting)
# Ajouter une colonne 'algorithm' pour chaque dataframe
Unique_weighted$algorithm <- "Unique_weightedAggregation"
Unique_maximization$algorithm <- "Unique_maximizationAggregation"
Unique_Predomics_Aggre$algorithm <- "Unique_Predomics_Aggregation_ova"
Unique_voting$algorithm <- "Unique_votingAggregation"
Unique_ranking$algorithm <- "Unique_rankingAggregation"
# Réordonner les colonnes pour avoir "k" et "algorithm" en premier
Unique_weighted <- Unique_weighted[, c("k", "empirical", "generalization", "algorithm")]
Unique_maximization <- Unique_maximization[, c("k", "empirical", "generalization", "algorithm")]
Unique_Predomics_Aggre <-Unique_Predomics_Aggre[, c("k", "empirical", "generalization", "algorithm")]
Unique_voting <- Unique_voting[, c("k", "empirical", "generalization", "algorithm")]
Unique_ranking <- Unique_ranking[, c("k", "empirical", "generalization", "algorithm")]
# Combiner les dataframes
combined_df <- rbind(Unique_weighted,Unique_maximization,
Unique_Predomics_Aggre, Unique_ranking,
Unique_voting)
# Supprimer les lignes contenant des valeurs NaN
combined_df <- na.omit(combined_df)
# Transformer les données pour ggplot2
data_melted <- melt(combined_df, id.vars = c("k", "algorithm"), variable.name = "type", value.name = "accuracy")
# Plotting
ggplot(data_melted, aes(x = k, y = accuracy, color = type)) +
geom_point(size = 3) +
geom_line(aes(group = interaction(algorithm, type), linetype = type)) +
geom_text(aes(label = round(accuracy, 3)), vjust = -0.5, size = 3) +  # Ajouter les valeurs à côté des points
facet_wrap(~ algorithm, ncol = 2) +  # Afficher deux graphiques par ligne
theme_minimal() +
labs(title = "Empirical vs Generalization Accuracy for Different Algorithms",
x = "Valeur de k",
y = "Accuracy",
color = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("empirical" = "#377EB8", "generalization" = "#E41A1C"))
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = interaction(Algorithm, k), y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
geom_text(aes(label = round(Accuracy, 4)), vjust = -0.3, position = position_dodge(width = 0.9)) +
labs(title = "Mean Accuracy of Different Aggregation Methods",
x = "Algorithm and k",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Filter out rows with k_1 as it has NaN values
data <- subset(data, k != "k_1")
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = Algorithm, y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
geom_text(aes(label = round(Accuracy, 4)), vjust = -0.3, position = position_dodge(width = 0.9)) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Mean Accuracy of Different Aggregation Methods by k Value",
x = "Algorithm",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Filter out rows with k_1 as it has NaN values
data <- subset(data, k != "k_1")
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = Algorithm, y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
geom_text(aes(label = round(Accuracy, 4)), vjust = -0.3, position = position_dodge(width = 0.9)) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Mean Accuracy of Different Aggregation Methods by k Value",
x = "Algorithm",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Filter out rows with k_1 as it has NaN values
data <- subset(data, k != "k_1")
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = Algorithm, y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
geom_text(aes(label = sprintf("%.2f", Accuracy)), vjust = -0.3, position = position_dodge(width = 0.9)) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Mean Accuracy of Different Aggregation Methods by k Value",
x = "Algorithm",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Filter out rows with k_1 as it has NaN values
data <- subset(data, k != "k_1")
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = Algorithm, y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
geom_text(aes(label = sprintf("%.2f", Accuracy)), vjust = -0.3, position = position_dodge(width = 0.9)) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Mean Accuracy of Different Aggregation Methods by k Value",
x = "Algorithm",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Filter out rows with k_1 as it has NaN values
data <- subset(data, k != "k_1")
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = Algorithm, y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Mean Accuracy of Different Aggregation Methods by k Value",
x = "Algorithm",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Create data frames for each aggregation method
data <- data.frame(
Algorithm = rep(c("Multi_weightedAggregation", "Multi_maximizationAggregation",
"Multi_Predomics_Aggregation_ova", "Multi_rankingAggregation",
"Multi_votingAggregation"), each = 4),
k = rep(c("k_1", "k_2", "k_3", "k_4"), times = 5),
empirical = c(NA, 0.6794354, 0.7131740, 0.7539121,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6514395, 0.7119344, 0.7380741,
NA, 0.6357997, 0.6971142, 0.6979474,
NA, 0.6572077, 0.7203716, 0.7452683),
generalization = c(NA, 0.6119505, 0.6789835, 0.7407967,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5406593, 0.6739011, 0.6910714,
NA, 0.5868132, 0.6615385, 0.6465659,
NA, 0.5987637, 0.6703297, 0.7357143)
)
# Filter out rows with k_1 as it has NaN values
data <- subset(data, k != "k_1")
# Melt the data frame for easier plotting with ggplot2
library(reshape2)
data_melt <- melt(data, id.vars = c("Algorithm", "k"), variable.name = "Type", value.name = "Accuracy")
# Create the bar plot
ggplot(data_melt, aes(x = Algorithm, y = Accuracy, fill = Type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Mean Accuracy of Different Aggregation Methods by k Value",
x = "Algorithm",
y = "Accuracy",
fill = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
theme_minimal()
load("Multi_Predomics_aggregation_ova.rda")
load("Multi_maximizationAggregation.rda")
load("Multi_rankingAggregation.rda")
load("Multi_weightedAggregation.rda")
load("Multi_votingAggregation.rda")
Unique_maximizationAggregation$classifier$models$k_2$k_2$accuracy_
length(Unique_maximizationAggregation$classifier$models)
length(Unique_maximizationAggregation$classifier$models$k_2)
Unique_maximizationAggregation$classifier$models$k_2[[1]]$accuracy_
# Extract accuracies for each k
extract_accuracies <- function(models) {
sapply(models, function(model) model$accuracy_)
}
# Create a list to store accuracies for each k
accuracies <- lapply(Unique_maximizationAggregation$classifier$models, extract_accuracies)
# Convert the list to a data frame for easier viewing
accuracies_df <- do.call(rbind, lapply(names(accuracies), function(k) {
data.frame(k = k, accuracy = accuracies[[k]])
}))
# Print the accuracies for each k
print(accuracies_df)
# Optionally, view it in a table format
View(accuracies_df)
# Load necessary libraries
library(ggplot2)
# Extract accuracies for each k
extract_accuracies <- function(models) {
sapply(models, function(model) model$accuracy_)
}
# Create a list to store accuracies for each k
accuracies <- lapply(Unique_maximizationAggregation$classifier$models, extract_accuracies)
# Convert the list to a data frame for easier plotting
accuracies_df <- do.call(rbind, lapply(names(accuracies), function(k) {
data.frame(k = k, accuracy = accuracies[[k]])
}))
# Plot the distribution of accuracies for each k
ggplot(accuracies_df, aes(x = accuracy)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ k, scales = "free_y") +
labs(title = "Distribution of Model Accuracies by k",
x = "Accuracy",
y = "Count") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Extract accuracies for each k
extract_accuracies <- function(models) {
sapply(models, function(model) model$accuracy_)
}
# Create a list to store accuracies for each k
accuracies <- lapply(Unique_maximizationAggregation$classifier$models, extract_accuracies)
# Convert the list to a data frame for plotting
accuracies_df <- do.call(rbind, lapply(names(accuracies), function(k) {
data.frame(k = k, accuracy = accuracies[[k]])
}))
# Plot boxplots of accuracies for each k
ggplot(accuracies_df, aes(x = k, y = accuracy)) +
geom_boxplot(fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Model Accuracies by k",
x = "k",
y = "Accuracy") +
theme_minimal()
library(ggplot2)
library(reshape2)
Unique_weighted <- Unique_weightedAggregation$crossVal$scores$mean.acc
Unique_maximization <- Unique_maximizationAggregation$crossVal$scores$mean.acc
Unique_Predomics_Aggre <- Unique_Predomics_aggregation_ova$crossVal$scores$mean.acc
Unique_ranking <- Unique_rankingAggregation$crossVal$scores$mean.acc
Unique_voting <- Unique_votingAggregation$crossVal$scores$mean.acc
Unique_weighted$k <- rownames(Unique_weighted)
Unique_maximization$k <- rownames(Unique_maximization)
Unique_Predomics_Aggre$k <- rownames(Unique_Predomics_Aggre)
Unique_ranking$k <- rownames(Unique_ranking)
Unique_voting$k <- rownames(Unique_voting)
Unique_weighted$algorithm <- "Unique_weightedAggregation"
Unique_maximization$algorithm <- "Unique_maximizationAggregation"
Unique_Predomics_Aggre$algorithm <- "Unique_Predomics_Aggregation_ova"
Unique_voting$algorithm <- "Unique_votingAggregation"
Unique_ranking$algorithm <- "Unique_rankingAggregation"
Unique_weighted <- Unique_weighted[, c("k", "empirical", "generalization", "algorithm")]
Unique_maximization <- Unique_maximization[, c("k", "empirical", "generalization", "algorithm")]
Unique_Predomics_Aggre <-Unique_Predomics_Aggre[, c("k", "empirical", "generalization", "algorithm")]
Unique_voting <- Unique_voting[, c("k", "empirical", "generalization", "algorithm")]
Unique_ranking <- Unique_ranking[, c("k", "empirical", "generalization", "algorithm")]
combined_df <- rbind(Unique_weighted,Unique_maximization,
Unique_Predomics_Aggre, Unique_ranking,
Unique_voting)
combined_df <- na.omit(combined_df)
data_melted <- melt(combined_df, id.vars = c("k", "algorithm"), variable.name = "type", value.name = "accuracy")
ggplot(data_melted, aes(x = k, y = accuracy, color = type)) +
geom_point(size = 3) +
geom_line(aes(group = interaction(algorithm, type), linetype = type)) +
geom_text(aes(label = round(accuracy, 3)), vjust = -0.5, size = 3) +  # Ajouter les valeurs à côté des points
facet_wrap(~ algorithm, ncol = 2) +  # Afficher deux graphiques par ligne
theme_minimal() +
labs(title = "Mean accuracy: empirical vs. generalization for cross-validation using the same variable",
x = "Valeur de k",
y = "Accuracy",
color = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("empirical" = "#377EB8", "generalization" = "#E41A1C"))
library(ggplot2)
library(reshape2)
# Données fournies
Multi_weighted <- Multi_weightedAggregation$crossVal$scores$mean.acc
Multi_maximization <- Multi_maximizationAggregation$crossVal$scores$mean.acc
Multi_Predomics_Aggre <- Multi_Predomics_Aggregation_ova$crossVal$scores$mean.acc
Multi_ranking <- Multi_rankingAggregation$crossVal$scores$mean.acc
Multi_voting <- Multi_votingAggregation$crossVal$scores$mean.acc
# Ajouter la colonne 'k'
Multi_weighted$k <- rownames(Multi_weighted)
Multi_maximization$k <- rownames(Multi_maximization)
Multi_Predomics_Aggre$k <- rownames(Multi_Predomics_Aggre)
Multi_ranking$k <- rownames(Multi_ranking)
Multi_voting$k <- rownames(Multi_voting)
# Ajouter une colonne 'algorithm' pour chaque dataframe
Multi_weighted$algorithm <- "Multi_weightedAggregation"
Multi_maximization$algorithm <- "Multi_maximizationAggregation"
Multi_Predomics_Aggre$algorithm <- "Multi_Predomics_Aggregation_ova"
Multi_voting$algorithm <- "Multi_votingAggregation"
Multi_ranking$algorithm <- "Multi_rankingAggregation"
# Réordonner les colonnes pour avoir "k" et "algorithm" en premier
Multi_weighted <- Multi_weighted[, c("k", "empirical", "generalization", "algorithm")]
Multi_maximization <- Multi_maximization[, c("k", "empirical", "generalization", "algorithm")]
Multi_Predomics_Aggre <- Multi_Predomics_Aggre[, c("k", "empirical", "generalization", "algorithm")]
Multi_voting <- Multi_voting[, c("k", "empirical", "generalization", "algorithm")]
Multi_ranking <- Multi_ranking[, c("k", "empirical", "generalization", "algorithm")]
# Combiner les dataframes
combined_df <- rbind(Multi_weighted, Multi_maximization,
Multi_Predomics_Aggre, Multi_ranking,
Multi_voting)
# Supprimer les lignes contenant des valeurs NaN
combined_df <- na.omit(combined_df)
# Transformer les données pour ggplot2
data_melted <- melt(combined_df, id.vars = c("k", "algorithm"), variable.name = "type", value.name = "accuracy")
# Plotting
ggplot(data_melted, aes(x = k, y = accuracy, color = type)) +
geom_point(size = 3) +
geom_line(aes(group = interaction(algorithm, type), linetype = type)) +
geom_text(aes(label = round(accuracy, 3)), vjust = -0.5, size = 3) +  # Ajouter les valeurs à côté des points
facet_wrap(~ algorithm, ncol = 2) +  # Afficher deux graphiques par ligne
theme_minimal() +
labs(title = "Mean accuracy: empirical vs. generalization for cross-validation using the specific variables of each combination.",
x = "Valeur de k",
y = "Accuracy",
color = "Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("empirical" = "#377EB8", "generalization" = "#E41A1C"))
