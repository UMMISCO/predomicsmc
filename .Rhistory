printy(best.model.test)
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
nClasse <- unique(y)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
best.model.test$score_
length(best.model.test$score_)
y.test
length(as.numeric(y_test))
listee_y
nClasse <- unique(y)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[2]]
listee_y[[2]]
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
nClasse <- unique(y)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[2]]
listee_y
list_y
nClasse <- unique(y.test)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
listee_y
length(best.model.test$score_)
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
y.test
nClasse <- unique(y.test)
nClasse
nClasse <- unique(y.test)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
listee_y
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
nClasse <- unique(y.test)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
y.test
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
nClasse <- unique(y.test)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
best.model.test
listee_y
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test1.rda")
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- Data_test$y
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
nClasse <- unique(y.test)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
nClasse <- unique(y.test)
listee_y <- list()
listee_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y_test == class_i | y_test == class_j)
y_pair <- y_test[indices]
X_pair <- X_test[,indices]
listee_y[[k]] <- y_pair
listee_X[[k]] <- X_pair
k <- k + 1
}
}
y=list_y[[1]]
y.test=listee_y[[1]]
tmp <- plotAUC(best.model$score_, y, percent = TRUE); rm(tmp)
# create the roc objects
rocobj.train <- roc(y ~ best.model$score_)
rocobj.test <- roc(y.test ~ best.model.test$score_)
# get the population of models scrambled by model size
pop <- modelCollectionToPopulation(res_clf$classifier$models)
printy(pop)
pop.df <- populationToDataFrame(pop)
head(pop.df[,-c(3,4,7,8,14)])
pop.df.melt <- melt(pop.df, id.vars = c("accuracy_","eval.sparsity"))
g.before <- ggplot(data = pop.df.melt, aes(y = accuracy_, x = eval.sparsity)) +
geom_boxplot(notch = FALSE, outlier.shape = " ", position = position_dodge(width=0.9), alpha = 0.3) +
geom_point(aes(color = eval.sparsity), position=position_jitterdodge(dodge.width=0.9), size = 1, alpha = 0.5) +
ylim(c(0,1)) +
xlab("Model parsimony") +
ggtitle("Original population") +
theme_bw() +
theme(legend.position="bottom", legend.direction="horizontal") +
guides(colour="none")
# select the best
fbm <- selectBestPopulation(pop)
printy(fbm)
fbm.df <- populationToDataFrame(fbm)
fbm.df.melt <- melt(fbm.df, id.vars = c("accuracy_","eval.sparsity"))#; head(fbm.df.melt)
g.after <- ggplot(data = fbm.df.melt, aes(y = accuracy_, x = eval.sparsity)) +
geom_boxplot(notch = FALSE, position = position_dodge(width=0.9), alpha = 0.3) +
geom_point(aes(color = eval.sparsity), position=position_jitterdodge(dodge.width=0.9), size = 1, alpha = 0.5) +
ylim(c(0,1)) +
xlab("Model parsimony") +
ggtitle("FBM") +
theme_bw() +
theme(legend.position="bottom", legend.direction="horizontal") +
guides(colour="none")
grid.arrange(g.before, g.after, ncol =2)
fa <- makeFeatureAnnot_ovo(pop = fbm,
X = X,
y = y,
clf = clf)
dim(fa[[1]]$pop.noz)
(g1 <- plotFeatureModelCoeffs(feat.model.coeffs = fa[[1]]$pop.noz))
(g2 <- plotAbundanceByClass(features = rownames(fa[[1]]$pop.noz), X = list_X[[1]], y = y))
(g3 <- plotPrevalence(features = rownames(fa[[1]]$pop.noz), X = list_X[[1]], y = y))
#| echo: false
#| warning: false
library(mcpredomics)
library(predomics)
library(ggplot2)
library(gridExtra)
library(pROC)
library(reshape2)
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_train.rda")
setwd("~/Documents/multiclasse_predomics/mcpredomics/vignette")
#| echo: false
#| warning: false
setwd("~/Documents/multiclasse_predomics/mcpredomics/vignette")
load(file = "data_train.rda")
dataset_train <- data_train
#| echo: false
#| warning: false
setwd("~/Documents/multiclasse_predomics/mcpredomics/vignette")
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_train.rda")
dataset_train <- Data_train
str(dataset_train, max.level = 1)
# Filter the non informative variables
X <- dataset_train$X; y <- dataset_train$y # set global variables
X <- X[rowSums(X)!=0,]; dim(X) # filter out variables with only zero values
X <- filterNoSignal(X = X, side = 1, threshold = "auto", verbose = FALSE); dim(X)
#| echo: false
#| warning: false
y <- as.vector(y)
# classifier one versus one
clf <- terga1_ovo(nCores = 1,
seed = 1,
plot = TRUE
)
printy(clf) # print the object for more information
isClf(clf)  # test whether the object is a classifier
class(clf)  # the class of the classifier object
#| echo: false
#| warning: false
setwd("~/Documents/multiclasse_predomics/mcpredomics/vignette")
load(file = "res_clf.rda")
res_clf <- res_clf
#| echo: false
#| warning: false
res_clf.dig <- digest(obj = res_clf, penalty = 0.75/100, plot = TRUE)
#| echo: false
#| warning: false
nClasse <- unique(y)
list_y <- list()
list_X <- list()
k <- 1
for (i in 1:(length(nClasse)-1)) {
for (j in (i+1):length(nClasse)) {
class_i <- nClasse[i]
class_j <- nClasse[j]
indices <- which(y == class_i | y == class_j)
y_pair <- y[indices]
X_pair <- X[,indices]
list_y[[k]] <- y_pair
list_X[[k]] <- X_pair
k <- k + 1
}
}
# get the best model
best.model <- res_clf.dig$best$model
printy(best.model)
grid.arrange(plotModel(best.model, X=list_X[[1]], y=list_y[[1]], sort.features = FALSE, feature.name = TRUE),
plotModel(best.model, X=list_X[[1]], y=list_y[[1]], sort.features = FALSE, feature.name = TRUE, importance = TRUE),
ncol=2)
#| echo: false
#| warning: false
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
X.test <- dataset_test$X[rownames(X),]
#| echo: false
#| warning: false
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
best.model.test <- evaluateModel_ovo(mod = best.model, X = X.test, y = y.test, clf = clf, eval.all = TRUE, force.re.evaluation = TRUE, mode = "test")
printy(best.model.test)
#| echo: false
#| warning: false
# get the population of models scrambled by model size
pop <- modelCollectionToPopulation(res_clf$classifier$models)
printy(pop)
pop.df <- populationToDataFrame(pop)
head(pop.df[,-c(3,4,7,8,14)])
pop.df.melt <- melt(pop.df, id.vars = c("accuracy_","eval.sparsity"))
g.before <- ggplot(data = pop.df.melt, aes(y = accuracy_, x = eval.sparsity)) +
geom_boxplot(notch = FALSE, outlier.shape = " ", position = position_dodge(width=0.9), alpha = 0.3) +
geom_point(aes(color = eval.sparsity), position=position_jitterdodge(dodge.width=0.9), size = 1, alpha = 0.5) +
ylim(c(0,1)) +
xlab("Model parsimony") +
ggtitle("Original population") +
theme_bw() +
theme(legend.position="bottom", legend.direction="horizontal") +
guides(colour="none")
# select the best
fbm <- selectBestPopulation(pop)
printy(fbm)
fbm.df <- populationToDataFrame(fbm)
fbm.df.melt <- melt(fbm.df, id.vars = c("accuracy_","eval.sparsity"))#; head(fbm.df.melt)
g.after <- ggplot(data = fbm.df.melt, aes(y = accuracy_, x = eval.sparsity)) +
geom_boxplot(notch = FALSE, position = position_dodge(width=0.9), alpha = 0.3) +
geom_point(aes(color = eval.sparsity), position=position_jitterdodge(dodge.width=0.9), size = 1, alpha = 0.5) +
ylim(c(0,1)) +
xlab("Model parsimony") +
ggtitle("FBM") +
theme_bw() +
theme(legend.position="bottom", legend.direction="horizontal") +
guides(colour="none")
grid.arrange(g.before, g.after, ncol =2)
#| echo: false
#| warning: false
fa_ <- makeFeatureAnnot_ovo(pop = fbm,
X = X,
y = y,
clf = clf)
dim(fa_[[1]]$pop.noz)
(g1 <- plotFeatureModelCoeffs(feat.model.coeffs = fa_[[1]]$pop.noz))
(g2 <- plotAbundanceByClass(features = rownames(fa_[[1]]$pop.noz), X = list_X[[1]], y = y))
#| echo: false
#| warning: false
fa <- makeFeatureAnnot_ovo(pop = fbm,
X = X,
y = y,
clf = clf)
dim(fa[[1]]$pop.noz)
(g1 <- plotFeatureModelCoeffs(feat.model.coeffs = fa[[1]]$pop.noz))
(g2 <- plotAbundanceByClass(features = rownames(fa[[1]]$pop.noz), X = list_X[[1]], y = y))
#| echo: false
#| warning: false
fa <- makeFeatureAnnot_ovo(pop = fbm,
X = X,
y = y,
clf = clf)
dim(fa[[1]]$pop.noz)
(g1 <- plotFeatureModelCoeffs(feat.model.coeffs = fa[[1]]$pop.noz))
(g2 <- plotAbundanceByClass(features = rownames(fa[[1]]$pop.noz), X = list_X[[1]], y = list_y[[1]]))
(g3 <- plotPrevalence(features = rownames(fa[[1]]$pop.noz), X = list_X[[1]], y = list_y[[1]]))
#| echo: false
#| warning: false
library(randomForest)
setwd("~/Documents/multiclasse_predomics/mcpredomics/vignette")
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_train.rda")
#load(file = "dataset_train.rda")
Data_train <- Data_train
str(Data_train, max.level = 1)
# Filter the non informative variables
X <- Data_train$X; y <- Data_train$y # set global variables
X <- X[rowSums(X)!=0,]; dim(X) # filter out variables with only zero values
X <- filterNoSignal(X = X, side = 1, threshold = "auto", verbose = FALSE); dim(X)
X_train <- X
y_train <- y
model_rf <- randomForest(x = t(X_train), y = factor(y_train), ntree = 500)
model_rf
#| echo: false
#| warning: false
round(sum(diag(model_rf))/sum(model_rf),2)
#| echo: false
#| warning: false
tab = table(predictions = model_rf, actuelles =y )
#| echo: false
#| warning: false
tab = table(predictions = model_rf, actuelles =y_train)
#| echo: false
#| warning: false
pre <- predict(model_rf,x = t(X_train) )
tab = table(predictions = pre, actuelles =y_train)
round(sum(diag(tab))/sum(tab),2)
tab
#| echo: false
#| warning: false
#Données Test
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
X_test = t(X.test)
pred_test <- predict(model_rf,X_test )
#| echo: false
#| warning: false
#Données Test
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
X_test = t(X.test)
pred_test <- predict(model_rf,X_test )
tab2 = table(predictions = pred_test, actuelles =y.test  )
#| echo: false
#| warning: false
#Données Test
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
X_test = t(X.test)
pred_test <- predict(model_rf,X_test )
tab2 = table(predictions = pred_test, actuelles =y.test  )
tab2
#| echo: false
#| warning: false
#Données Test
load("~/Documents/multiclasse_predomics/mcpredomics/vignette/Data_test.rda")
X.test <- Data_test$X[rownames(X),]
all(rownames(X) == rownames(X.test)) # test ordering
y.test <- as.vector(Data_test$y)
X_test = t(X.test)
pred_test <- predict(model_rf,X_test )
tab2 = table(predictions = pred_test, actuelles =y.test  )
round(sum(diag(tab2))/sum(tab2),2)
tab2
